Implementa la funció: static int[] senseRepetits(int t[]) aquesta funció rebrà per paràmetre un array i retornarà un nou array que no contingui duplicats de la llista original t.

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] tabla = {4, 4, 9, 10, 1, 9, 10, 2, 10};
        System.out.println("Con:" + Arrays.toString(tabla));
        int[] nuevoTabla = sinRepetidos(tabla);
        System.out.println("Sin:" + Arrays.toString(nuevoTabla));
    }

    static int[] sinRepetidos(int tabla[]){
        int tablaNOrep[] = new int[0];
        for(int i = 0; i<tabla.length; i++){
            int num = tabla[i];
            if(norepite(tablaNOrep,num)){
                tablaNOrep = Arrays.copyOf(tablaNOrep, tablaNOrep.length+1);
                tablaNOrep[tablaNOrep.length-1] = num;
            }
        }
        return tablaNOrep;
    }

    static boolean norepite (int[] tabla, int num){
        for (int i = 0; i<tabla.length; i++){
            if (tabla[i] == num){
                return false;
            }
        }
        return true;
    }
	
Llegir i emmagatzemar n nombres sencers a una llista. Després, es construirán dues noves taules: una amb els nombres senars de la llista original i una altra amb els nombres parells de la llista original. Les taules dels nombres parells i senars es mostrarán de manera ordenada.

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num;
        int[] tabla = new int [0];
        System.out.print("Dime 10 numeros: ");
        for (int i = 0; i < 10; i++){
            num = sc.nextInt();
            tabla = Arrays.copyOf(tabla, tabla.length+1);
            tabla[tabla.length-1] = num;
        }
        int[] Timpar = impar(tabla);
        int[] Tpar = par(tabla);
        System.out.println("Tabla: " + Arrays.toString(tabla));
        System.out.println("ImPar: " + Arrays.toString(Timpar));
        System.out.println("Par: " + Arrays.toString(Tpar));
    }

    static int[] par(int tabla[]){
        int[] Tpar = new int [0];
        for (int i = 0; i < tabla.length; i++){
            int num = tabla[i];
            if (num % 2 == 0){
                Tpar = Arrays.copyOf(Tpar, Tpar.length+1);
                Tpar[Tpar.length-1] = num;
            }
        }
        Arrays.sort(Tpar);
        return Tpar;
    }

    static int[] impar(int tabla[]){
        int[] Timpar = new int [0];
        for (int i = 0; i < tabla.length; i++){
            int num = tabla[i];
            if (num%2 != 0){
                Timpar = Arrays.copyOf(Timpar, Timpar.length+1);
                Timpar[Timpar.length-1] = num;
            }
        }
        Arrays.sort(Timpar);
        return Timpar;
    }